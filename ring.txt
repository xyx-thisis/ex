#include<stdio.h>
#include<stdlib.h>
#define MAX 20

int ids[MAX], status[MAX], n, cord;

void sort_processes() {
    int i, j, temp;
    for (i = 0; i < n - 1; i++) {
        for (j = 0; j < n - i - 1; j++) {
            if (ids[j] > ids[j + 1]) {
                temp = ids[j];
                ids[j] = ids[j + 1];
                ids[j + 1] = temp;

                temp = status[j];
                status[j] = status[j + 1];
                status[j + 1] = temp;
            }
        }
    }
}

void display() {
    int i;
    printf("\nProcesses--> ");
    for(i = 0; i < n; i++)
        printf("\t%d", ids[i]);
    printf("\nAlive--> \t");
    for(i = 0; i < n; i++)
        printf("\t%d", status[i]);
    printf("\nCoordinator is: %d", cord);
}

void ring() {
    int msg[20], k, i, j;
    int ch, crash_id, act_id, gen_id, flag, temp_cord;
    do {
        printf("\n --- Menu for the Ring Algorithm ---");
        printf("\n1. Crash\n2. Activate\n3. Display\n4. Exit");
        printf("\n -----------------------------------");
        printf("\nEnter choice: ");
        scanf("%d", &ch);
        switch(ch) {
            case 1:
                printf("\nEnter Process ID to Crash:: ");
                scanf("%d", &crash_id);
                
                for (i = 0; i < n; i++) {
                    if (ids[i] == crash_id) {
                        if (status[i]) {
                            status[i] = 0;
                            break;
                        } else {
                            printf("\nProcess is already dead!!");
                            break;
                        }
                    }
                }

                if (i == n) {
                    printf("\nProcess ID not found!");
                    break;
                }

                do {
                    printf("\nEnter election generator ID:: ");
                    scanf("%d", &gen_id);
                    
                    for (j = 0; j < n; j++) {
                        if (ids[j] == gen_id && status[j])
                            break;
                    }

                    if (j == n || gen_id == crash_id) {
                        printf("\nEnter a valid generator ID:: ");
                    }
                } while (j == n || gen_id == crash_id);

                flag = 0;
                k = 0;

                if (crash_id == cord) {
                    printf("\nStarting election from Process %d...\n", gen_id);
                    msg[k++] = gen_id;

                    for (i = (j + 1) % n; ids[i] != gen_id; i = (i + 1) % n) {
                        if (status[i]) {
                            printf("Message sent from %d to %d\n", ids[(i - 1 + n) % n], ids[i]);
                            msg[k++] = ids[i];
                        }
                    }

                    printf("\nElection message received back at %d. Messages in the ring:\n", gen_id);
                    temp_cord = 0;

                    for (i = 0; i < k; i++) {
                        printf("Message: %d\n", msg[i]);
                        if (temp_cord < msg[i]) {
                            temp_cord = msg[i];
                        }
                    }

                    cord = temp_cord;
                    printf("\nNew coordinator elected: Process %d\n", cord);
                }

                display();
                break;

            case 2:
                printf("\nEnter Process ID to Activate:: ");
                scanf("%d", &act_id);
                for (i = 0; i < n; i++) {
                    if (ids[i] == act_id) {
                        if (!status[i]) {
                            status[i] = 1;
                            break;
                        } else {
                            printf("\nProcess is already alive!!");
                            break;
                        }
                    }
                }

                if (i == n) {
                    printf("\nProcess ID not found!");
                    break;
                }

                if (act_id == cord) {
                    break;
                }

                flag = 0;
                for (i = 0; i < n; i++) {
                    if (ids[i] == act_id)
                        break;
                }

                for (j = (i + 1) % n; j != i; j = (j + 1) % n) {
                    printf("\nMessage is sent from %d to %d", ids[(j - 1 + n) % n], ids[j]);
                    if (status[j]) {
                        temp_cord = ids[j];
                        printf("\nResponse is sent from %d to %d", ids[j], act_id);
                        flag = 1;
                        break;
                    }
                }
                
                if (flag == 1) {
                    cord = temp_cord;
                } else {
                    cord = act_id;
                }

                display();
                break;

            case 3:
                display();
                break;

            case 4:
                break;
        }
    } while(ch != 4);
}

int main() {
    printf("\nEnter number of processes:: ");
    scanf("%d", &n);

    for(int i = 0; i < n; i++) {
        printf("\nEnter Process ID for Process %d:: ", i + 1);
        scanf("%d", &ids[i]);
        printf("Enter if Process %d is Alive or not (0/1):: ", ids[i]);
        scanf("%d", &status[i]);
    }
    sort_processes();

    for(int i = n-1; i >= 0; i--) {
        if(status[i] == 1) {
            cord = ids[i];
            break;
        }
    }

    display();
    ring();
    return 0;
}
